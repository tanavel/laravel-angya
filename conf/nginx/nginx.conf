#================================================#
# Syntax:  user user [group];
# Default: user nobody nobody;
# Context: main
# Description:
#   workerプロセスの実行ユーザ。
#================================================#
user nginx;

#================================================#
# Syntax:  worker_processes number | auto;
# Default: worker_processes 1;
# Context: main
# Description:
#   workerプロセスの数。
#   基本的にはCPUコアの数と同じにしとけばいい。
#   autoだと自動的にCPUコアの数を検出する。
#   ただし最適値がCPUコアの数と一致するとは限らない。
#================================================#
worker_processes auto;

#================================================#
# Syntax:  error_log file [level];
# Default: error_log logs/error.log error;
# Context: main, http, mail, stream, server, location
# Description:
#   エラーログの設定。
#   ログレベルに指定できるのは下記。下に向かって重要度が高く、指定したログレベルより重要度が高いログを出力する
#   Nginx公式Dockerイメージでは、/var/log/nginx/error.logが設定されているが、
#   実際は標準エラー出力へのシンボリックリンクになっている。
#   - debug
#   - info
#   - notice
#   - warn
#   - error
#   - crit
#   - alert
#   - emerg
#================================================#
error_log /var/log/nginx/error.log notice;

#================================================#
# Syntax:  pid file;
# Default: pid logs/nginx.pid;
# Context: main
# Description:
#   メインプロセスのプロセスIDを格納するファイル
#================================================#
pid /var/run/nginx.pid;

#================================================#
# Syntax:  events { ... }
# Default: —
# Context: main
# Description:
#   eventsが何なのか調べても分からなかったけど、eventsモジュールに関するコンテキスト。
#   moduleリファレンスにも載ってない。。。
#   パフォーマンスや通信に関するモジュールらしい。
#================================================#
events {

    #================================================#
    # Syntax:  worker_connections number;
    # Default: worker_connections 512;
    # Context: events
    # Description:
    #   workerプロセスが開くことのできる同時接続の最大数。
    #   増やせば同時アクセスに強くなるんだと思う。
    #   適正値は、worker_connections * 2 ~ 4 < worker_rlimit_nofile
    #   実際の接続数はworker_rlimit_nofile(1workerプロセスあたりのファイルディスクリプタの上限値)より大きくはならない。
    #   ファイルディスクリプタとはファイルを識別する仕組み。
    #================================================#
    worker_connections  1024;
}

#================================================#
# Syntax:  http { ... }
# Default: —
# Context: main
# Description:
# HTTPモジュールに関するコンテキスト。
#================================================#
http {

    #================================================#
    # Syntax: types { ... }
    # Default:
    #   types {
    #     text/html  html;
    #     image/gif  gif;
    #     image/jpeg jpg;
    #   }
    # Context: http, server, location
    # Description:
    #   ファイルの拡張子とMIMEタイプのマップ。
    #   MIMEタイプとはファイルの種類を表す情報のこと。
    #   MIMEタイプの情報をもとに、ブラウザがコンテンツをどう表示するか制御するために使われる。
    #================================================#
    include       /etc/nginx/mime.types;

    #================================================#
    # Syntax:  default_type mime-type;
    # Default: default_type text/plain;
    # Context: http, server, location
    # Description:
    #   デフォルトのMIMEタイプ。mime.typesに合致しなかった場合はこれが使われる。
    #   application/octet-streamはファイルの種類は不明みたいなニュアンス。
    #================================================#
    default_type  application/octet-stream;

    #================================================#
    # TODO: ※ 分析しやすいようにjson形式にしたい！
    # Syntax:  log_format name [escape=default|json|none] string ...;
    # Default: log_format combined "...";
    # Context: http
    # Description:
    #   ログフォーマットの指定。
    #================================================#
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_time"';

    #================================================#
    # Syntax:
    #   access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
    #   access_log off;
    # Default: access_log logs/access.log combined;
    # Context: http, server, location, if in location, limit_except
    # Description:
    #   アクセスログの設定。
    #================================================#
    access_log  /var/log/nginx/access.log  main;

    #================================================#
    # Syntax:  sendfile on | off;
    # Default: sendfile off;
    # Context: http, server, location, if in location
    # Description:
    #   コンテンツの読み込みとクライアントへのレスポンスの送信にsendfile()APIを使うかどうか。
    #   カーネル空間でファイルの読み込みと送信が完了するため効率がいいとのこと。
    #   ただし、プラットフォームとの相性が悪いと問題になる可能性があるので万能ではないらしい。
    #================================================#
    sendfile        on;

    #================================================#
    # Syntax:  tcp_nopush on | off;
    # Default: tcp_nopush off;
    # Context: http, server, location
    # Description:
    #   sendfileが有効な時に宣言可能。
    #   onにするとレスポンスヘッダとファイルの内容をまとめて送るようになるので効率がいいらしい。
    #   コメントアウトされてたけど有効化。
    #================================================#
    tcp_nopush     on;

    #================================================#
    # Syntax:  keepalive_timeout timeout [header_timeout];
    # Default: keepalive_timeout 75s;
    # Context: http, server, location
    # Description:
    #   HTTPの持続的な接続を有効にしてプロセスが待機する時間。
    #   同じクライアントからのコネクションを何度も0から開くなら一定期間待つ方が効率がいい。
    #   ただし、その分をプロセスが占領されるのでできれば短い時間の方が良いらしい。
    #   劇的な変化が起こるわけでないけど設定しといた方が良いらしい。
    #   高負荷時に本領が発揮されるやも？
    #   65秒が指定されていたけど10秒に変更。
    #================================================#
    keepalive_timeout  10;

    #================================================#
    # Syntax:  gzip on | off;
    # Default: gzip off;
    # Context: http, server, location, if in location
    # Description:
    #   レスポンスをgzipするかどうか。
    #   gzip圧縮するとネットワーク負荷を下げることができてブラウザのレンダリングを早められる。
    #   コメントアウトされてたけど有効化。
    #   TODO:
    #     - gzip_typesで圧縮するMIMEタイプを指定できるが、デフォルトだとhtmlしか圧縮しないからcssとかjsも圧縮するようにしたい
    #     - CDNが前段にあるとgzip_vary、gzip_proxiedなどが必要そう
    #     - ちっちゃいファイルを圧縮しても効果が薄いのでgzip_min_lengthを指定した方が良いかも
    #================================================#
    gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
